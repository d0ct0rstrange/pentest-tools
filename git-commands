#Initialization of git repo
	git init
	git config --global user.name “[firstname lastname]
	git config --global user.email “[valid-email]”
	git config --global color.ui auto

#If there exists a remote repo
	git clone [url] 

#Adding remote repo url as ALIAS origin (can be any name;origin is commonly used)
	git remote set-url origin <ssh-URL>

#View remote repos
	git remote -v

#generating ssh-key
	ssh-keygen -t rsa -c "email-id"

#Display current status
	git status
	git log

#adding a file or folder in git
	git add <file/folder name>
	git add . 			#To add all changed files

#Unstage added files
	git reset HEAD -- path/to/file

#Unstage everything at once
	git reset HEAD -- .

#Commiting changes in the stage area (save changes to upload on next push)
	git commit -am "message about commit"
	
#Pushing local commit to the remote repo from local repo
	git push origin master  	#Master is the master branch. It can be sub branches like dev

#Merge commits from REMOTE repo to LOCAL repo
	git pull

#Create a new branch and switch to that branch
	git checkout -b <branch-name>

#Delte a branch
	git branch -d <branch-name>


#Fetch all the REMOTE branches to LOCAL repo
	git fetch [alias]

#Merge a REMOTE branch into LOCAL branch
	git merge [alias]/[branch]

#Show the diff of what is in branchA that is not in branchB
	git diff branchB...branchA

#Show the commits on branchA that are not on branchB
	git log branchB..branchA	

#Track changes of a specific file including renames
	git log --follow [file]

#Show metadata and content CHANGES of a specific COMMIT
	git show commit

#Undoes all commits after [commit], preserving changes locally
	git reset <commit>

#!!Undoes allcommits regardless of history!! #USE IT WITH EXTREME CAUTION!!
        git reset --hard [commit]

